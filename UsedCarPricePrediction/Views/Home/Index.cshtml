@{
    ViewBag.Title = "Predict Car Price";
}

<div class="card shadow-lg rounded-4 bg-white">
    <h2 class="mb-3 text-center text-success fw-semibold">Enter Car Details</h2>

    <form id="carForm" asp-action="Predict" method="post" action="/result">
        <div class="row g-3">
            <!-- Row 1: Year and Odometer (shorter numeric fields) -->
            <div class="col-md-4">
                <label class="form-label">Year</label>
                <input type="number" name="year" class="form-control form-control-sm" required />
            </div>
            <div class="col-md-4">
                <label class="form-label">Odometer</label>
                <input type="number" name="odometer" class="form-control form-control-sm" required />
            </div>
            <div class="col-md-4">
                <label class="form-label">Condition</label>
                <select name="condition" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>good</option>
                    <option>new</option>
                    <option>like new</option>
                    <option>excellent</option>
                    <option>fair</option>
                    <option>salvage</option>
                </select>
            </div>
            
            <!-- Row 2: Manufacturer (reduced width) -->
            <div class="col-md-8">
                <label class="form-label">Manufacturer</label>
                <select name="manufacturer" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>Toyota</option>
                    <option>gmc</option>
                    <option>chevrolet</option>
                    <option>ford</option>
                    <option>jeep</option>
                    <option>nissan</option>
                    <option>ram</option>
                    <option>mazda</option>
                    <option>cadillac</option>
                    <option>honda</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Cylinders</label>
                <select name="cylinders" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>3 cylinders</option>
                    <option>4 cylinders</option>
                    <option>5 cylinders</option>
                    <option>6 cylinders</option>
                    <option>8 cylinders</option>
                    <option>10 cylinders</option>
                    <option>12 cylinders</option>
                    <option>other</option>
                </select>
            </div>
            
            <!-- Row 3: Model (reduced width) -->
            <div class="col-12">
                <label class="form-label">Model</label>
                <select name="model" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>Camry</option>
                    <option>sierra 1500 crew cab slt</option>
                    <option>silverado 1500</option>
                    <option>silverado 1500 crew</option>
                    <option>tundra double cab sr</option>
                    <option>f-150 xlt</option>
                    <option>sierra 2500 hd extended cab</option>
                    <option>silverado 1500 double</option>
                    <option>tacoma</option>
                    <option>colorado extended cab</option>
                    <option>corvette grand sport</option>
                </select>
            </div>
            
            <!-- Row 4: Fuel, Transmission, and Drive -->
            <div class="col-md-4">
                <label class="form-label">Fuel</label>
                <select name="fuel" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>gas</option>
                    <option>diesel</option>
                    <option>electric</option>
                    <option>hybrid</option>
                    <option>other</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Transmission</label>
                <select name="transmission" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>automatic</option>
                    <option>manual</option>
                    <option>other</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Drive</label>
                <select name="drive" class="form-select form-select-sm select2">
                    <option></option>
                    <option>fwd</option>
                    <option>rwd</option>
                    <option>4wd</option>
                </select>
            </div>
            
            <!-- Row 5: Type and Title Status -->
            <div class="col-md-6">
                <label class="form-label">Type</label>
                <select name="type" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>sedan</option>
                    <option>pickup</option>
                    <option>truck</option>
                    <option>coupe</option>
                    <option>SUV</option>
                    <option>hatchback</option>
                    <option>mini-van</option>
                    <option>offroad</option>
                    <option>bus</option>
                    <option>other</option>
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">Title Status</label>
                <select name="title_status" class="form-select form-select-sm select2" required>
                    <option></option>
                    <option>clean</option>
                    <option>rebuilt</option>
                    <option>lien</option>
                    <option>salvage</option>
                    <option>missing</option>
                    <option>parts only</option>
                </select>
            </div>
            
            <!-- Row 6: Latitude and Longitude -->
            <div class="col-md-6">
                <label class="form-label">Latitude</label>
                <input type="number" name="lat" class="form-control form-control-sm" step="any" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Longitude</label>
                <input type="number" name="long" class="form-control form-control-sm" step="any" />
            </div>
            
            <!-- Row 7: Description (full width) -->
            <div class="col-12">
                <label class="form-label">Description</label>
                <textarea name="description" class="form-control form-control-sm" rows="3"
                          style="resize: none; overflow: hidden;" oninput="autoResize(this)"
                          placeholder="Enter car description..."></textarea>
            </div>
        </div>
        <div class="text-center mt-3">
            <button type="submit" class="btn btn-success btn-sm px-4" id="predictBtn">
                <span id="btnText">Predict</span>
                <span id="btnSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;"></span>
            </button>
        </div>
    </form>
</div>

<div id="loadingOverlay" class="loading-overlay" style="display: none;">
    <div class="loading-content">
        <div class="spinner-border text-success" style="width: 3rem; height: 3rem;"></div>
        <p class="mt-3 text-success fw-semibold">Predicting car price...</p>
    </div>
</div>

<div class="result-container">
    <div class="result" id="res"></div>
</div>

<script>
    const style = document.createElement('style');
    style.textContent = `
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .loading-content {
            text-align: center;
            background-color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        .error-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.75);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            backdrop-filter: blur(4px);
        }
        .error-modal {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            text-align: center;
            border: 1px solid #e5e7eb;
            position: relative;
            overflow: hidden;
        }
        .error-modal::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #dc2626, #ef4444);
        }
        .error-icon {
            width: 4rem;
            height: 4rem;
            background: linear-gradient(135deg, #fee2e2, #fecaca);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            color: #dc2626;
            font-size: 2rem;
            font-weight: bold;
        }
        .error-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }
        .error-message {
            color: #6b7280;
            margin-bottom: 2rem;
            line-height: 1.6;
        }
        .error-button {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 0.875rem;
        }
        .error-button:hover {
            background: linear-gradient(135deg, #b91c1c, #991b1b);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }
    `;
    document.head.appendChild(style);

    function showLoading() {
        document.getElementById('loadingOverlay').style.display = 'flex';
        document.getElementById('predictBtn').disabled = true;
        document.getElementById('btnText').textContent = 'Predicting...';
        document.getElementById('btnSpinner').style.display = 'inline-block';
    }

    function hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
        document.getElementById('predictBtn').disabled = false;
        document.getElementById('btnText').textContent = 'Predict';
        document.getElementById('btnSpinner').style.display = 'none';
    }

    function showError(title, message) {
        const errorOverlay = document.createElement('div');
        errorOverlay.className = 'error-overlay';
        errorOverlay.innerHTML = `
            <div class="error-modal">
                <div class="error-icon">!</div>
                <h3 class="error-title">${title}</h3>
                <p class="error-message">${message}</p>
                <button class="error-button" onclick="this.closest('.error-overlay').remove()">
                    Try Again
                </button>
            </div>
        `;
        document.body.appendChild(errorOverlay);
        
        // Add click outside to close
        errorOverlay.addEventListener('click', function(e) {
            if (e.target === errorOverlay) {
                errorOverlay.remove();
            }
        });
        
        // Add escape key to close
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                errorOverlay.remove();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
    }


    function autoResize(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = textarea.scrollHeight + 'px';
    }


    document.getElementById('carForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);

        showLoading();

        const data = {};
        formData.forEach((value, key) => {
            if (!isNaN(value) && value.trim() !== '') {
                data[key.toLowerCase()] = isNaN(value) ? value : Number(value);
            } else {
                data[key.toLowerCase()] = value;
            }
        });

        fetch('/result', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })
        .then(async res => {
            if (!res.ok) {
                const errorMsg = await res.text();
                let errorTitle = 'Prediction Error';
                let errorMessage = errorMsg;

                if (res.status === 400) {
                    errorTitle = 'Invalid Input';
                    //errorMessage = 'Please check that all required fields are filled correctly.';
                } else if (res.status === 500) {
                    errorTitle = 'Server Error';
                    //errorMessage = 'Our prediction service is temporarily unavailable. Please try again later.';
                } else if (res.status === 404) {
                    errorTitle = 'Service Not Found';
                    //errorMessage = 'The prediction service could not be found. Please contact support.';
                }
                
                showError(errorTitle, errorMessage);
                throw new Error(`Error ${res.status}: ${errorMsg}`);
            }
            return res.text();
        })
        .then(html => {
            document.getElementById('res').innerHTML = html;
        })
        .catch(err => {
            console.error('Error:', err);
            // Error modal is already shown in the fetch block above
            // Only show generic error if it's not an HTTP error
            if (!err.message.includes('Error ')) {
                showError('Network Error', 'Unable to connect to the server. Please check your internet connection and try again.');
            }
        })
        .finally(() => {
            hideLoading();
        });
    });
</script>